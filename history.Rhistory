scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme_gray() +
labs(y = "av. number")
p2 <- ggplot(data = df, aes(x = monthnumb, y = avgCatal, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme_gray() +
labs(y = "av. number")
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme_gray() +
labs(y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme_gray(plot.title = element_text(hjust = 0.5)) +
labs(title = "New plot title",
y = "av. number")
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "New plot title",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme_gray(plot.title = element_text(hjust = 0.5)) +
labs(title = "New plot title",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p1 <- ggplot(data = df, aes(x = monthnumb, y = avgItem, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Purchases",
y = "av. number")
p2 <- ggplot(data = df, aes(x = monthnumb, y = avgCatal, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Catalog promotions",
y = "av. number")
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Retail promotions",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Retail promotions",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Retail promotions",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
p1 <- ggplot(data = df, aes(x = monthnumb, y = avgItem, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Purchases",
y = "av. number")
p2 <- ggplot(data = df, aes(x = monthnumb, y = avgCatal, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Catalog promotions",
y = "av. number")
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Retail promotions",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
View(customers)
ggplot(data = df, aes(x = monthnumb, y = avgItem, group=as.factor(winter), color=as.factor(winter))) +
geom_boxplot() +
scale_x_continuous(name = "Month",breaks = c(13,26), labels = c("Non Winter","Winter")) +
theme() +
labs(color = "Winter")
pks <- c("haven","ggplot2","scales","dplyr","tidyverse","magrittr","gridExtra","pscl")
for(i in pks){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
library(pscl)
customers %<>% filter(monthnumb < 37)
View(customers)
customers$gender <- as.factor(customers$gender)
customers$married <- as.factor(customers$married)
model <- hurdle(item ~ gender + merried, data = customers)
model <- hurdle(item ~ gender + married, data = customers)
attach(customers)
ggplot(data = df, aes(x = monthnumb, y = avgItem, group=as.factor(winter), color=as.factor(winter))) +
geom_boxplot() +
scale_x_continuous(name = "Month",breaks = c(13,26), labels = c("Non Winter","Winter")) +
theme() +
labs(color = "Winter")
model <- hurdle(item ~ gender + married, data = customers)
summary(model)
plot(model)
model$fitted.values
plot(model$fitted.values)
summary(model$fitted.values)
model$vcov
summary(model)
View(customers)
model <- hurdle(item ~ gender + married + as.factor(retailpromo), data = customers)
summary(model)
View(df)
p1 <- ggplot(data = df, aes(x = monthnumb, y = avgItem, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Purchases",
y = "av. number")
p2 <- ggplot(data = df, aes(x = monthnumb, y = avgCatal, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Catalog promotions",
y = "av. number")
p3 <- ggplot(data = df, aes(x = monthnumb, y = avgRetail, group=1)) +
geom_line() +
scale_x_continuous(name = "time [years]",breaks = c(0,12,24,36), labels = c(0,1,2,3)) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Retail promotions",
y = "av. number")
grid.arrange(p1, p2, p3, ncol=1)
ggplot(data = df, aes(x = monthnumb, y = avgItem, group=as.factor(winter), color=as.factor(winter))) +
geom_boxplot() +
scale_x_continuous(name = "Month",breaks = c(13,26), labels = c("Non Winter","Winter")) +
theme() +
labs(color = "Winter")
histDist
library(gamlss)
histDist
histDist(customers$item)
histDist(customers$item)
histDist(customers$item, family = "PO")
mod1 <- glm(item ~ ., data = customers, family = "poisson")
mu <- predict(mod1, type = "response")
exp <- sum(dpois(x = 0, lambda = mu))
round(exp)
sum(customers$item < 1)
model <- hurdle(item ~ ., data = customers)
summary(model)
model <- hurdle(item ~ as.factor(monthnumb)+retailpromo+catalogpromo+as.factor(gender)+as.factor(married), data = customers)
summary(model)
sum(predict(model, type = "prob")[,1])
sum(customers$item < 1)
predict(model, type = "response")[1:5]
predict(model, type = "zero")[1:5]
predict(model, type = "countÃ¹")[1:5]
predict(model, type = "count")[1:5]
predict(model, type = "zero")[1:5] * predict(model, type = "count")[1:5]
predict(model, type = "response")[1:5]
pks <- c("haven","ggplot2","scales","dplyr","tidyverse","magrittr","gridExtra","pscl","countreg")
for(i in pks){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
install.packages("countreg", repos="http://R-Forge.R-project.org")
library(countreg)
rootogram(model, max = 80)
rootogram(model, max = 20)
rootogram(model, max = 10)
rootogram(model, max = 100)
model2 <- hurdle(item ~ as.factor(monthnumb)+retailpromo+catalogpromo+as.factor(gender)+as.factor(married), data = customers, dist = "negbin")
rootogram(model2, max = 80)
AIC(model, model2)
BIC(model,model2)
plot(model2)
?hurdle
sum(predict(model, type = "prob")[,1])
sum(customers$item < 1)
sum(customers$item = 1)
sum(customers$item == 1)
sum(predict(model, type = "prob")[,2])
sum(customers$item == 2)
sum(predict(model, type = "prob")[,3])
sum(customers$item == 3)
sum(predict(model, type = "prob")[,4])
sum(customers$item == 4)
sum(predict(model, type = "prob")[,5])
sum(customers$item == 5)
sum(predict(model, type = "prob")[,6])
sum(customers$item == 6)
sum(predict(model, type = "prob")[,7])
sum(customers$item == 7)
sum(predict(model, type = "prob")[,8])
model3 <- hurdle(item ~ as.factor(monthnumb)+retailpromo+catalogpromo+as.factor(gender)+as.factor(married), data = customers, dist = "binomial")
AIC(model,model2,model3)
BIC(model,model2,model3)
plot(model3)
rootogram(model3, max = 80)
model4 <- hurdle(item ~ as.factor(monthnumb)+as.factor(retailpromo)+catalogpromo+as.factor(gender)+as.factor(married)+as.factor(income), data = customers, dist = "binomial")
AIC(model,model2,model3,model4)
BIC(model,model2,model3,model4)
model5 <- hurdle(item ~ as.factor(monthnumb)+as.factor(retailpromo)+catalogpromo+as.factor(gender)+as.factor(married)+as.factor(income), data = customers, dist = "negbin")
AIC(model,model2,model3,model4,model5)
BIC(model,model2,model3,model4,model5)
rootogram(model5, max = 80)
sum(predict(model, type = "prob")[,1])
sum(customers$item == 0)
sum(predict(model, type = "prob")[,2])
sum(customers$item == 1)
sum(predict(model, type = "prob")[,1])
sum(predict(model5, type = "prob")[,1])
sum(predict(model5, type = "prob")[,2])
sum(customers$item == 1)
sum(predict(model2, type = "prob")[,2])
evaluateModel <- function(model1, model2, df){
TZero <- sum(df$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
return("True zeros: "+TZero+"\n"+
"Predicted zeros from model-1: "+Pzero1+"\n"+
"Predicted zeros from model-2: "+Pzero2+"\n"+
"Predicted ones from model-1: "+Pones1+"\n"+
"Predicted ones from model-2: "+Pones2+"\n"+
"Predicted duos from model-1: "+Pduos1+"\n"+
"Predicted duos from model-2: "+Pduos2)
}
evaluateModel <- function(model1, model2, df){
TZero <- sum(df$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
cat("True zeros: "+TZero+"\n"+
"Predicted zeros from model-1: "+Pzero1+"\n"+
"Predicted zeros from model-2: "+Pzero2+"\n"+
"Predicted ones from model-1: "+Pones1+"\n"+
"Predicted ones from model-2: "+Pones2+"\n"+
"Predicted duos from model-1: "+Pduos1+"\n"+
"Predicted duos from model-2: "+Pduos2)
}
evaluateModel(model2, model5, customers)
evaluateModel <- function(model1, model2, df){
TZero <- sum(df$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
print("True zeros: "+TZero+"\n"+
"Predicted zeros from model-1: "+Pzero1+"\n"+
"Predicted zeros from model-2: "+Pzero2+"\n"+
"Predicted ones from model-1: "+Pones1+"\n"+
"Predicted ones from model-2: "+Pones2+"\n"+
"Predicted duos from model-1: "+Pduos1+"\n"+
"Predicted duos from model-2: "+Pduos2)
}
evaluateModel(model2, model5, customers)
evaluateModel <- function(model1, model2, df){
TZero <- sum(df$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
print("True zeros: "+as.numeric(TZero)+"\n"+
"Predicted zeros from model-1: "+as.numeric(Pzero1)+"\n"+
"Predicted zeros from model-2: "+as.numeric(Pzero2)+"\n"+
"Predicted ones from model-1: "+as.numeric(Pones1)+"\n"+
"Predicted ones from model-2: "+as.numeric(Pones2)+"\n"+
"Predicted duos from model-1: "+as.numeric(Pduos1)+"\n"+
"Predicted duos from model-2: "+as.numeric(Pduos2))
}
evaluateModel <- function(model1, model2, df){
TZero <- sum(df$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
print("True zeros: "+as.numeric(TZero)+"\n"+
"Predicted zeros from model-1: "+as.numeric(Pzero1)+"\n"+
"Predicted zeros from model-2: "+as.numeric(Pzero2)+"\n"+
"Predicted ones from model-1: "+as.numeric(Pones1)+"\n"+
"Predicted ones from model-2: "+as.numeric(Pones2)+"\n"+
"Predicted duos from model-1: "+as.numeric(Pduos1)+"\n"+
"Predicted duos from model-2: "+as.numeric(Pduos2))
}
evaluateModel(model2, model5, customers)
TZero <- sum(df$item == 0)
evaluateModel <- function(model1, model2, data){
TZero <- sum(data$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
print("True zeros: "+as.numeric(TZero)+"\n"+
"Predicted zeros from model-1: "+as.numeric(Pzero1)+"\n"+
"Predicted zeros from model-2: "+as.numeric(Pzero2)+"\n"+
"Predicted ones from model-1: "+as.numeric(Pones1)+"\n"+
"Predicted ones from model-2: "+as.numeric(Pones2)+"\n"+
"Predicted duos from model-1: "+as.numeric(Pduos1)+"\n"+
"Predicted duos from model-2: "+as.numeric(Pduos2))
}
evaluateModel(model2, model5, customers)
evaluateModel <- function(model1, model2, data){
TZero <- sum(data$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
paste("True zeros: ",as.numeric(TZero))
}
evaluateModel(model2, model5, customers)
evaluateModel <- function(model1, model2, data){
TZero <- sum(data$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
paste("True zeros:",as.numeric(TZero),
"Predicted zeros from model-1:",as.numeric(Pzero1),
"Predicted zeros from model-2 ",as.numeric(Pzero2),
"Predicted ones from model-1:",as.numeric(Pones1),
"Predicted ones from model-2:",as.numeric(Pones2),
"Predicted duos from model-1:",as.numeric(Pduos1),
"Predicted duos from model-2:",as.numeric(Pduos2),sep = "\n")
}
evaluateModel(model2, model5, customers)
evaluateModel <- function(model1, model2, data){
TZero <- sum(data$item == 0)
Pzero1 <- sum(predict(model1, type = "prob")[,1])
Pzero2 <- sum(predict(model2, type = "prob")[,1])
Pones1 <- sum(predict(model1, type = "prob")[,2])
Pones2 <- sum(predict(model2, type = "prob")[,2])
Pduos1 <- sum(predict(model1, type = "prob")[,3])
Pduos2 <- sum(predict(model2, type = "prob")[,3])
res = paste("True zeros:",as.numeric(TZero),
"Predicted zeros from model-1:",as.numeric(Pzero1),
"Predicted zeros from model-2 ",as.numeric(Pzero2),
"Predicted ones from model-1:",as.numeric(Pones1),
"Predicted ones from model-2:",as.numeric(Pones2),
"Predicted duos from model-1:",as.numeric(Pduos1),
"Predicted duos from model-2:",as.numeric(Pduos2),sep = "\n")
return(cat(res))
}
evaluateModel(model2, model5, customers)
sum(data$item == 1)
sum(customers$item == 1)
sum(customers$item == 2)
summary(model5)
model5$fitted.values
summary(model5$fitted.values)
model6 <- hurdle(item ~ as.factor(monthnumb)+as.factor(retailpromo)+catalogpromo+as.factor(gender)+as.factor(married)+as.factor(income), data = customers, dist = "negbin")
model7 <- hurdle(I(item>0) ~ as.factor(monthnumb)+as.factor(retailpromo)+catalogpromo+as.factor(gender)+as.factor(married)+as.factor(income), data = customers, dist = "negbin")
expCoef <- exp(coef((model6)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef
expCoef <- exp(coef((model6)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef
expCoef <- exp(coef((model6)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef
names(coef(model7))
expCoef <- exp(coef((model6)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef <- exp(coef((model6)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- names(coef(model7))
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef
rownames(expCoef) <- names(coef(model7))
summary(model7)
model7 <- glm(I(item>0) ~ as.factor(monthnumb)+as.factor(retailpromo)+catalogpromo+as.factor(gender)+as.factor(married)+as.factor(income), data = customers, family  = binomial(link = "logit"))
rownames(expCoef) <- names(coef(model7))
colnames(expCoef) <- c("Count_model","Zero_hurdle_model")
expCoef
summary(6)
summary(model6)
View(customers)
summary(customers)
customers$pricepromo <- as.factor(customers$pricepromo)
summary(customers)
customers <- read_stata("Z://DesktopC//LUMSA//2//Data Mining//customers.dta")
customers %<>% filter(monthnumb < 25)
model8 <- hurdle(I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, dist = "nrgbin")
model8 <- hurdle(I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, dist = "negbin")
summary(model8)
model8 <- hurdle(item ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, dist = "negbin")
model8 <- glm(I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, binomial(link = "logit"))
model8 <- glm(I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, family = binomial(link = "logit"))
df$gender <- as.factor(df$gender)
df$married <- as.factor(df$married)
customers$gender <- as.factor(df$gender)
customers$gender <- as.factor(customers$gender)
customers$married <- as.factor(customers$married)
model8 <- glm(I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, family = binomial(link = "logit"))
model8 <- glm(formula = I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, family = binomial(link = "logit"))
?glm
model8 <- glm(formula = I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, family = binomial)
model8 <- glm(formula = I(item>0) ~ retailpromo+catalogpromo+married+gender, data = customers, family = binomial)
model8 <- glm(formula = I(item>0) ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, family = binomial)
model8 <- hurdle(item ~ pricepromo+retailpromo+catalogpromo+married+gender, data = customers, dist = "negbin")
AIC(model2,model5,model8)
rootogram(model8, max = 80)
rootogram(model8, max = 30)
sum(customers$item=00)
sum(customers$item==0)
sum(predict(model8, type = "prob"))[1,]
sum(predict(model8, type = "prob"))[11]
sum(predict(model8, type = "prob"))[1]
sum(predict(model8, type = "prob"))[,1]
sum(predict(model8, type = "prob")[,1])
sum(customers$item==1)
sum(predict(model8, type = "prob")[,2])
sum(predict(model8, type = "prob")[,3])
sum(customers$item==2)
summary(model8)
model9 <- hurdle(item ~ catalogpromo+married+gender | retailpromo+catalogpromo+married+gender, data = customers, dist = "negbin")
AIC(model8,model9)
BIC(model8,model9)
summary(model9)
model10 <- hurdle(item ~ catalogpromo+married+gender | catalogpromo+married+gender, data = customers, dist = "negbin")
BIC(model8,model9,model10)
AIC(model8,model9,model10)
summary(model10)
rootogram(model10, max = 30)
sum(customers$item==1)
sum(predict(model10, type = "prob")[,2])
sum(customers$item==2)
sum(predict(model10, type = "prob")[,3])
sum(customers$item==3)
sum(predict(model10, type = "prob")[,4])
model8$formula
summary(8)
summary(model8)
summary(model9)
summary(model10)
lmtest::lrtest(model8, model10)
lmtest::lrtest(model10, model8)
?lrtest
lmtest::lrtest(model8, model10)
lmtest::lrtest(model9, model10)
lmtest::lrtest(model8, model9)
lmtest::lrtest(model8, model10)
lmtest::lrtest(model9, model10)
lmtest::lrtest(model8, model9)
summary(model9)
install.packages("glmmTMB")
library(glmmTMB)
install.packages("glmmTMB", type="source")
install.packages("glmmTMB", type = "source")
detach("package:glmmTMB", unload = TRUE)
install.packages("glmmTMB", type = "source")
install.packages("glmmTMB", type = "source")
library(glmmTMB)
glmmTMB
model10$formula
=glmmTM
?glmmTMB
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),data = customers,family =truncated_nbinom1,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family =truncated_nbinom1,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=truncated_poisson,REML = F)
model11 <- glmmTMB(item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=truncated_poisson,REML = F)
model11 <- glmmTMB(item ~ married + gender,ziformula = ~.,data = customers,family=truncated_poisson,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=nbinom1,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=nbinom2,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=truncated_poisson,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=truncated_nbinom2,REML = F)
model11 <- glmmTMB(formula = item ~ married + gender +(1|as.factor(hh_key)),ziformula = ~.,data = customers,family=truncated_nbinom1,REML = F)
model11 <- glmmTMB(item ~ married + gender,ziformula = ~.,data = customers,family=nbinom1,REML = F)
summary(model11)
plot(model11)
savehistory("C:/Users/X Fasada X/Downloads/history.Rhistory")
